#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Some description."""

import logging
import argparse
import sys
import os
import re

import citadel


def main():

    if sys.version_info < (2,6) or sys.version_info > (2,8):
        raise SystemExit('Sorry, this code needs Python 2.6 or Python 2.7 (current: %s.%s)' % (sys.version_info[0], sys.version_info[1]))

    desc = 'Generate a shell script that runs a build.'
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument("-v", "--verbose", action="store_true", \
        help="Increase output verbosity")
    parser.add_argument("-f", "--file", default="citadel.yml", \
        help="A YAML file used to generate the build script.")
    parser.add_argument("-e", "--environment", default='', \
        help="Set the execution environment.")
    parser.add_argument("-i", "--ignore", \
        help="Prevent/ignore the specified keys from loading.")

    args = parser.parse_args()

    logging.basicConfig(format='%(asctime)s::%(levelname)s::%(message)s')
    logging.getLogger().setLevel(getattr(logging, 'DEBUG'))

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    if not args.ignore:
        args.ignore = []
    else:
        normalized = re.sub('[|;, ]+', ' ', args.ignore).split()
        args.ignore = [x.encode('utf8') for x in normalized]


    if os.path.isdir(args.file):
        args.file = os.path.join(args.file, 'citadel.yml')
    else:
        args.file = os.path.join('.', args.file)

    if not os.path.isfile(args.file):
        raise SystemExit('Unable to find file: %s' % (args.file))

    output = citadel.load(args.file, args.environment, args.ignore)
    if not output:
        raise SystemExit('Errors were found while processing: %s' % (args.file))
    print output

if __name__ == '__main__':
    main()




